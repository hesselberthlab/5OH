# Snakemake-based pipeline for Hammarlund RNA-Seq data -> changepoints
#
# Usage:
# - Set experiment-specific variables
# - Run "snakemake -c bsub -j"
# - Enjoy life.

# Experiment-specific variables
user = "/vol2/home/speach"                                                     # path to your home directory
DATA = "%s/projects/collab/hammarlund-lab/results/20140225/" % user            # location of raw data
PROJECTDIR = "projects/collab/hammarlund-lab/results/20140225/changepoints"    # directory for results
RESULT = "%s/%s/" % (user, PROJECTDIR)                                         # full directory path for results

SAMPLES = "CNTRL_002_CGATGT_L002 CNTRL_TM_006_GCCAAT_L002 RTCB_004_TGACCA_L002 RTCB_TM_012_CTTGTA_L002".split()                           # sample names
#SAMPLES = "RTCB_TM_012_CTTGTA_L002".split()                           # sample names

source = "/vol2/home/speach"                                          # location of source scrimpts
PIPELINE = "%s/devel/5OH/src/collab/hammarlund-lab" % source          # path to scripts
REFBED = "%s/ref/genomes/ce10/ensGene.ce10.bed" % source


# The input to the first rule should be the desired output of the full workflow
rule all:
    input: expand("{result}{sample}.changepoints.bed", result=RESULT, sample=SAMPLES)

# The order of these rules does not matter, but are currently written in order of execution
rule generate_maps:
    input: DATA + "{sample}.tophat2/accepted_hits.bam"
    params: REFBED
    output: RESULT + "{sample}.pos.mappings.tab", RESULT + "{sample}.neg.mappings.tab"
    shell: "bash {PIPELINE}/changepoints_map_nostrand.sh {input} {params} {output}"

rule changepoints:
    input: RESULT + "{sample}.pos.mappings.tab", RESULT + "{sample}.neg.mappings.tab"
    output: RESULT + "{sample}.changepoints.bed"
    shell: "python {PIPELINE}/changepoints_map.py -p {input[0]} -n {input[1]} > {output}"