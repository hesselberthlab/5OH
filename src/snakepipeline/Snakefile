# Snakemake-based pipeline for 5OH-Seq in yeast
#
# Usage:
# - Set experiment-specific variables
# - Run "snakemake -c bsub -j"
# - Enjoy life.

# Experiment-specific variables
user = "/vol2/home/speach"                            # path to your home directory
DATA = "%s/projects/5OH/data/snaketest/" % user       # location of raw data
PROJECTDIR = "projects/5OH/results/snaketest"         # directory for results
RESULT = "%s/%s/" % (user, PROJECTDIR)                # full directory path for results
RGRAPHS = "%srgraphs/" % RESULT                       # full directory path for R graph results

SAMPLES = "SP8 SP7".split()                           # sample names
#DESCRIPS = "4742_DMSO 4742_Tm".split()               # sample descriptions
ASSEMBLY = "sacCer1"                                  # assembly for alignment
UMI = "NNNNNNNN"                                      # UMI to be removed
ALIGN_MODE = "std"                                    # name of alignment mode (will be included in filename)
ALIGN_ARGS = ""                                       # alignment arguments passed to bowtie
#COVARGS = "-5 -bg -g"                                # TODO: genome coverage arguments passed to bedtools genomecov


# Consistent variables
source = "/vol2/home/speach"                          # location of source scrimpts
PIPELINE = "%s/devel/5OH/src/snakepipeline" % source  # path to snakepipeline
BOWTIEIDX = "%s/ref/genomes/%s/%s" % (source, ASSEMBLY, ASSEMBLY)               # bowtie index
CHROM_SIZES = "%s/ref/genomes/%s/%s.chrom.sizes" % (source, ASSEMBLY, ASSEMBLY) # chromosome sizes
STRANDS = "both pos neg".split()                      # Strands
SANDBOX = "http://amc-sandbox.ucdenver.edu/~%s/" % user     # path to webspace on www
WEBFOLDER = "%s/public_html/" % user                  # path to web folder on cluster


# Consistent variables (currently specific to yeast)
GTF = "%s/ref/genomes/%s/sgdGene.%s.gtf" % (source, ASSEMBLY, ASSEMBLY)       # GTF file from database
FASTA = "%s/ref/genomes/%s/%s.fa" % (source, ASSEMBLY, ASSEMBLY)              # Fasta of specific assembly
FULLGFF = "%s/ref/genomes/sacCer1/sacCer1.fuller.bed" % source                # GFF file containing "all" gene species
MRNAWINDOWS = "%s/ref/genomes/sacCer1/sacCer1.mrna.20windows.bed" % source    # mRNA split into 20 bins
UTRWINDOWS = "%s/ref/genomes/sacCer1/sacCer1.UTRs.2window.bed" % source       # UTRs split into 2 bins

# The input to the first rule should be the desired output of the full workflow
rule all:
    input: expand("{rgraphs}{sample}.align.{align_mode}.windows.tab", rgraphs=RGRAPHS, sample=SAMPLES, align_mode=ALIGN_MODE)

# The order of these rules does not matter, but are currently written in order of execution
rule trim_umi:
    input: DATA + "{sample}.fq.gz"
    params: UMI
    output: DATA + "{sample}.umi.fq.gz"
    shell: "bash trim_umi.sh {input} {params} {output}"

rule align:
    input: DATA + "{sample}.umi.fq.gz"
    params: BOWTIEIDX, ALIGN_ARGS
    output: RESULT + "{sample}.UMIs_not_removed.align." + ALIGN_MODE + ".bam"
    shell: "bash align.sh {input} {params} {output}"

rule remove_duplicate_umis:
    input: RESULT + "{sample}.UMIs_not_removed.align." + ALIGN_MODE + ".bam"
    params: RESULT + "{sample}.umi-report.align." + ALIGN_MODE + ".bed.gz"
    output: RESULT + "{sample}.align." + ALIGN_MODE + ".bam"
    shell: "bash rm_dup_umi.sh {input} {params} {output}"

rule coverage_and_web:
    input: RESULT + "{sample}.align." + ALIGN_MODE + ".bam"
    params: CHROM_SIZES, RESULT, WEBFOLDER, PROJECTDIR
    output: RESULT + "{sample}.align." + ALIGN_MODE + ".strand.pos.CPMs.bg",
            RESULT + "{sample}.align." + ALIGN_MODE + ".strand.neg.CPMs.bg"
    shell: "bash coverage.sh {input} {params}"

# Currently just intersects and generates R-compatible table with gene names, counts sites
# TODO: Add the R code to make plots/summaries of gene species, etc; +/- change output file name?
rule gff_intersect:
    input: RESULT + "{sample}.align." + ALIGN_MODE + ".strand.pos.CPMs.bg",
           RESULT + "{sample}.align." + ALIGN_MODE + ".strand.neg.CPMs.bg"
    params: FULLGFF
    output: RGRAPHS + "{sample}.align." + ALIGN_MODE + ".gffintersect.tab"
    shell: "bash gff_intersect.sh {input} {params} {output}"

# Currently just intersects and generates R-compatible for gene binning
# TODO: Revist R code for gene body plot
# TODO: Make dynamic arguments for mrna/utr windows and count threshold
rule gene_bins:
    input: RESULT + "{sample}.align." + ALIGN_MODE + ".strand.pos.CPMs.bg",
           RESULT + "{sample}.align." + ALIGN_MODE + ".strand.neg.CPMs.bg"
    params: MRNAWINDOWS, UTRWINDOWS
    output: RGRAPHS + "{sample}.align." + ALIGN_MODE + ".windows.tab"
    shell: "bash gene_binning.sh {input} {params} {output}"