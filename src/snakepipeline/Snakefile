# Snakemake-based pipeline for 5OH-Seq in yeast
#
# Usage:
# - Set experiment-specific variables
# - Run "snakemake -c bsub -j"
# - Enjoy life.

# Experiment-specific variables
user = "/vol2/home/speach"                            # path to your home directory
DATA = "%s/projects/5OH/data/snaketest/" % user       # location of raw data
SAMPLES = "SP8 SP7".split()                           # sample names
#DESCRIPS = "4742_DMSO 4742_Tm".split()               # sample descriptions
ASSEMBLY = "sacCer1"                                  # assembly for alignment
RESULT = "%s/projects/5OH/results/snaketest/" % user  # directory for results
UMI = "NNNNNNNN"                                      # UMI to be removed
ALIGN_MODE = "std"                                    # name of alignment mode (will be included in filename)
ALIGN_ARGS = ""                                       # alignment arguments passed to bowtie
#COVARGS = "-5 -bg -g"                                # TODO: genome coverage arguments passed to bedtools genomecov


# Consistent variables
source = "/vol2/home/speach"
PIPELINE = "%s/devel/5OH/src/snakepipeline" % source
BOWTIEIDX = "%s/ref/genomes/%s/%s" % (source, ASSEMBLY, ASSEMBLY)
CHROM_SIZES = "%s/ref/genomes/%s/%s.chrom.sizes" % (source, ASSEMBLY, ASSEMBLY)
STRANDS = "both pos neg".split()

# Consistent variables (currently specific to yeast)
GTF = "%s/ref/genomes/%s/sgdGene.%s.gtf" % (source, ASSEMBLY, ASSEMBLY)
FASTA = "%s/ref/genomes/%s/%s.fa" % (source, ASSEMBLY, ASSEMBLY)
FULLGFF = "%s/ref/genomes/sacCer1/sacCer1.fuller.bed" % source
MRNAWINDOWS = "%s/ref/genomes/sacCer1/sacCer1.mrna.20windows.bed" % source
UTRWINDOWS = "%s/ref/genomes/sacCer1/sacCer1.UTRs.2window.bed" % source

# The input to the first rule should be the desired output of the full workflow
rule all:
    input: expand("{result}{sample}.align.{align_mode}.strand.all.CPMs.bg", result=RESULT, sample=SAMPLES, align_mode=ALIGN_MODE)

# The order of these rules does not matter, but are currently written in order of execution
rule trim_umi:
    input: DATA + "{sample}.fq.gz"
    params: UMI
    output: DATA + "{sample}.umi.fq.gz"
    shell: "bash trim_umi.sh {input} {params} {output}"

rule align:
    input: DATA + "{sample}.umi.fq.gz"
    params: BOWTIEIDX, ALIGN_ARGS
    output: RESULT + "{sample}.UMIs_not_removed.align." + ALIGN_MODE + ".bam"
    shell: "bash align.sh {input} {params} {output}"

rule remove_duplicate_umis:
    input: RESULT + "{sample}.UMIs_not_removed.align." + ALIGN_MODE + ".bam"
    params: RESULT + "{sample}.umi-report.align." + ALIGN_MODE + ".bed.gz"
    output: RESULT + "{sample}.align." + ALIGN_MODE + ".bam"
    shell: "bash rm_dup_umi.sh {input} {params} {output}"

rule coverage:
    input: RESULT + "{sample}.align." + ALIGN_MODE + ".bam"
    params: CHROM_SIZES, RESULT
    output: RESULT + "{sample}.align." + ALIGN_MODE + ".strand.all.CPMs.bg",
            RESULT + "{sample}.align." + ALIGN_MODE + ".strand.pos.CPMs.bg",
            RESULT + "{sample}.align." + ALIGN_MODE + ".strand.neg.CPMs.bg"
    shell: "bash coverage.sh {input} {params}"